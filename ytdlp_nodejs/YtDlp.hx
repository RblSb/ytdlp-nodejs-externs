package ytdlp_nodejs;

@:jsRequire("ytdlp-nodejs", "YtDlp") extern class YtDlp {
	function new(?opt:YtDlpOptions);
	private final binaryPath : Dynamic;
	@:optional
	private final ffmpegPath : Dynamic;
	private var getDefaultBinaryPath : Dynamic;
	function checkInstallationAsync(?options:{ @:optional var ffmpeg : Bool; }):js.lib.Promise<Bool>;
	function checkInstallation(?options:{ @:optional var ffmpeg : Bool; }):Bool;
	function execAsync(url:String, ?options:ArgsOptions & { @:optional dynamic function onData(d:String):Void; @:optional dynamic function onProgress(p:VideoProgress):Void; }):js.lib.Promise<String>;
	function exec(url:String, ?options:ArgsOptions):Dynamic;
	private var _execute : Dynamic;
	private var _executeAsync : Dynamic;
	private var buildArgs : Dynamic;
	function download<F>(url:String, ?options:{ @:optional var format : ts.AnyOf2<String, { var filter : F; @:optional var quality : Dynamic; @:optional var type : Dynamic; }>; @:optional var printHelp : Bool; @:optional var printVersion : Bool; @:optional var update : Bool; @:optional var noUpdate : Bool; @:optional var updateTo : String; @:optional var ignoreErrors : Bool; @:optional var noAbortOnError : Bool; @:optional var abortOnError : Bool; @:optional var dumpUserAgent : Bool; @:optional var listExtractors : Bool; @:optional var extractorDescriptions : Bool; @:optional var useExtractors : Array<String>; @:optional var defaultSearch : String; @:optional var ignoreConfig : Bool; @:optional var noConfigLocations : Bool; @:optional var configLocations : Array<String>; @:optional var pluginDirs : Array<String>; @:optional var noPluginDirs : Bool; @:optional var flatPlaylist : Bool; @:optional var noFlatPlaylist : Bool; @:optional var liveFromStart : Bool; @:optional var noLiveFromStart : Bool; @:optional var waitForVideo : Float; @:optional var noWaitForVideo : Bool; @:optional var markWatched : Bool; @:optional var noMarkWatched : Bool; @:optional var color : String; @:optional var compatOptions : Array<String>; @:optional var aliases : Array<String>; @:optional var proxy : String; @:optional var socketTimeout : Float; @:optional var sourceAddress : String; @:optional var forceIpv4 : Bool; @:optional var forceIpv6 : Bool; @:optional var impersonate : Array<String>; @:optional var listImpersonateTargets : Bool; @:optional var enableFileUrls : Bool; @:optional var geoVerificationProxy : String; @:optional var xff : String; @:optional var playlistItems : String; @:optional var minFilesize : String; @:optional var maxFilesize : String; @:optional var date : String; @:optional var dateBefore : String; @:optional var dateAfter : String; @:optional var matchFilter : String; @:optional var noMatchFilters : Bool; @:optional var breakMatchFilters : String; @:optional var noBreakMatchFilters : Bool; @:optional var noPlaylist : Bool; @:optional var yesPlaylist : Bool; @:optional var ageLimit : Float; @:optional var downloadArchive : String; @:optional var noDownloadArchive : Bool; @:optional var maxDownloads : Float; @:optional var breakOnExisting : Bool; @:optional var noBreakOnExisting : Bool; @:optional var breakPerInput : Bool; @:optional var noBreakPerInput : Bool; @:optional var skipPlaylistAfterErrors : Float; @:optional var concurrentFragments : Float; @:optional var throttledRate : String; @:optional var fileAccessRetries : Float; @:optional var retrySleep : Float; @:optional var noKeepFragments : Bool; @:optional var resizeBuffer : Bool; @:optional var noResizeBuffer : Bool; @:optional var lazyPlaylist : Bool; @:optional var noLazyPlaylist : Bool; @:optional var noHlsUseMpegts : Bool; @:optional var downloadSections : String; @:optional var downloader : String; @:optional var downloaderArgs : String; @:optional var playlistStart : Float; @:optional var playlistEnd : Float; @:optional var matchTitle : String; @:optional var rejectTitle : String; @:optional var includeAds : Bool; @:optional var limitRate : String; @:optional var breakOnReject : Bool; @:optional var noDownload : Bool; @:optional var playlistReverse : Bool; @:optional var playlistRandom : Bool; @:optional var xattrSetFilesize : Bool; @:optional var hlsSplitDiscontinuity : Bool; @:optional var geoBypass : Bool; @:optional var geoBypassCountry : String; @:optional var geoBypassIpBlock : String; @:optional var batchFile : String; @:optional var retries : Float; @:optional var fragmentRetries : Float; @:optional var skipUnavailableFragments : Bool; @:optional var abortOnUnavailableFragment : Bool; @:optional var keepFragments : Bool; @:optional var bufferSize : String; @:optional var noResumeDl : Bool; @:optional var continueDownload : Bool; @:optional var noContinue : Bool; @:optional var cookiesFromBrowser : String; @:optional var noCookies : Bool; @:optional var extractorRetries : Float; @:optional var allowDynamicMpd : Bool; @:optional var hlsUseMpegts : Bool; @:optional var httpChunkSize : String; @:optional var trimFileNames : Float; @:optional var noRestrictFilenames : Bool; @:optional var noWindowsFilenames : Bool; @:optional @:native("continue") var continue_ : Bool; @:optional var part : Bool; @:optional var noPart : Bool; @:optional var mtime : Bool; @:optional var noMtime : Bool; @:optional var writeDescription : Bool; @:optional var noWriteDescription : Bool; @:optional var writeInfoJson : Bool; @:optional var noWriteInfoJson : Bool; @:optional var writePlaylistMetafiles : Bool; @:optional var noWritePlaylistMetafiles : Bool; @:optional var cleanInfoJson : Bool; @:optional var noCleanInfoJson : Bool; @:optional var writeComments : Bool; @:optional var noWriteComments : Bool; @:optional var loadInfoJson : String; @:optional var cookies : String; @:optional var noCookiesFromBrowser : Bool; @:optional var cacheDir : String; @:optional var noCacheDir : Bool; @:optional var rmCacheDir : Bool; @:optional var paths : ts.AnyOf2<String, haxe.DynamicAccess<String>>; @:optional var output : String; @:optional var outputNaPlaceholder : String; @:optional var restrictFilenames : Bool; @:optional var windowsFilenames : Bool; @:optional var noOverwrites : Bool; @:optional var forceOverwrites : Bool; @:optional var noForceOverwrites : Bool; @:optional var autonumberStart : Float; @:optional var noPartFiles : Bool; @:optional var noBatchFile : Bool; @:optional var writeThumbnail : Bool; @:optional var writeAllThumbnails : Bool; @:optional var noWriteThumbnails : Bool; @:optional var convertThumbnails : String; @:optional var writeLink : Bool; @:optional var writeUrlLink : Bool; @:optional var writeWeblocLink : Bool; @:optional var writeLnkLink : Bool; @:optional var writeDesktopLink : Bool; @:optional var quiet : Bool; @:optional var noWarnings : Bool; @:optional var simulate : Bool; @:optional var noSimulate : Bool; @:optional var ignoreNoFormatsError : Bool; @:optional var ignoreEoFError : Bool; @:optional var noIgnoreEoFError : Bool; @:optional var noColor : Bool; @:optional var printTraffic : Bool; @:optional var consoleTitle : Bool; @:optional var verbose : Bool; @:optional var noQuiet : Bool; @:optional var noIgnoreNoFormatsError : Bool; @:optional var noProgress : Bool; @:optional var progress : Bool; @:optional var dumpSingleJson : Bool; @:optional var dumpJson : Bool; @:optional var printJson : Bool; @:optional var skipDownload : Bool; @:optional var print : String; @:optional var printToFile : String; @:optional var forceWriteArchive : Bool; @:optional var newline : Bool; @:optional var progressDelta : Float; @:optional var encoding : String; @:optional var legacyServerConnect : Bool; @:optional var noCheckCertificates : Bool; @:optional var preferInsecure : Bool; @:optional var addHeaders : haxe.DynamicAccess<String>; @:optional var binPath : String; @:optional var bidiWorkaround : Bool; @:optional var sleepRequests : Float; @:optional var sleepInterval : Float; @:optional var maxSleepInterval : Float; @:optional var sleepSubtitles : Float; @:optional var formatSort : Array<String>; @:optional var formatSortForce : Bool; @:optional var noFormatSortForce : Bool; @:optional var audioFormat : String; @:optional var videoFormat : String; @:optional var preferFreeFormats : Bool; @:optional var noPreferFreeFormats : Bool; @:optional var ytdlpForceKeyframes : Bool; @:optional var mergeOutputFormat : String; @:optional var videoMultiStreams : Bool; @:optional var noVideoMultiStreams : Bool; @:optional var audioMultiStreams : Bool; @:optional var noAudioMultiStreams : Bool; @:optional var checkFormats : Bool; @:optional var checkAllFormats : Bool; @:optional var noCheckFormats : Bool; @:optional var writeSubs : Bool; @:optional var writeAutoSubs : Bool; @:optional var writeAllSubs : Bool; @:optional var noWriteSubs : Bool; @:optional var listSubs : Bool; @:optional var subFormat : String; @:optional var subLangs : Array<String>; @:optional var username : String; @:optional var password : String; @:optional var twoFactor : String; @:optional var netrc : Bool; @:optional var videoPassword : String; @:optional var netrcLocation : String; @:optional var netrcCmd : String; @:optional var apListMso : Bool; @:optional var clientCertificate : String; @:optional var clientCertificateKey : String; @:optional var clientCertificatePassword : String; @:optional var apMso : String; @:optional var apUsername : String; @:optional var apPassword : String; @:optional var extractAudio : Bool; @:optional var audioQuality : String; @:optional var remuxVideo : String; @:optional var recodeVideo : String; @:optional var postprocessorArgs : haxe.DynamicAccess<Array<String>>; @:optional var keepVideo : Bool; @:optional var noKeepVideo : Bool; @:optional var postOverwrites : Bool; @:optional var noPostOverwrites : Bool; @:optional var embedSubs : Bool; @:optional var noEmbedSubs : Bool; @:optional var embedThumbnail : Bool; @:optional var noEmbedThumbnail : Bool; @:optional var embedMetadata : Bool; @:optional var noEmbedMetadata : Bool; @:optional var embedChapters : Bool; @:optional var noEmbedChapters : Bool; @:optional var embedInfoJson : Bool; @:optional var noEmbedInfoJson : Bool; @:optional var parseMetadata : haxe.DynamicAccess<String>; @:optional var replaceInMetadata : haxe.DynamicAccess<ts.Tuple2<String, String>>; @:optional var xattrs : Bool; @:optional var concatPlaylist : String; @:optional var fixup : String; @:optional var ffmpegLocation : String; @:optional var exec : String; @:optional var noExec : Bool; @:optional var convertSubs : String; @:optional var splitChapters : Bool; @:optional var noSplitChapters : Bool; @:optional var removeChapters : String; @:optional var noRemoveChapters : Bool; @:optional var forceKeyframesAtCuts : Bool; @:optional var noForceKeyframesAtCuts : Bool; @:optional var usePostProcessor : Array<String>; @:optional var sponsorblockMark : Array<String>; @:optional var sponsorblockRemove : Array<String>; @:optional var sponsorblockChapterTitle : String; @:optional var noSponsorblock : Bool; @:optional var sponsorblockApi : String; @:optional var extractorArgs : haxe.DynamicAccess<Array<String>>; @:optional var ignoreDynamicMpd : Bool; @:optional var dumpPages : Bool; @:optional var noHlsSplitDiscontinuity : Bool; @:optional var referer : String; @:optional var userAgent : String; @:optional var headers : haxe.DynamicAccess<String>; @:optional var debugPrintCommandLine : Bool; @:optional var writePages : Bool; @:optional var listFormats : Bool; @:optional var listThumbnails : Bool; @:optional var additionalOptions : Array<String>; }):Dynamic;
	function downloadAsync<F>(url:String, ?options:FormatOptions<F>):js.lib.Promise<String>;
	function stream<F>(url:String, ?options:FormatOptions<F>):PipeResponse;
	function getInfoAsync<T>(url:String, ?options:InfoOptions):js.lib.Promise<Dynamic>;
	function getThumbnailsAsync(url:String):js.lib.Promise<Array<VideoThumbnail>>;
	function getTitleAsync(url:String):js.lib.Promise<String>;
	function downloadFFmpeg():js.lib.Promise<Null<String>>;
	function getFileAsync<F>(url:String, ?options:Dynamic):js.lib.Promise<js.html.File>;
	static var prototype : YtDlp;
}